name: CI

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CLICOLOR: 1
  RUST_NIGHTLY_VERSION: nightly-2024-07-28
  CI: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ${{ matrix.package }} for ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        package:
          - fuel-streams-publisher
        platform:
          - os_name: macOS-aarch64
            os: macOS-latest
            target: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: ./.github/actions/setup-rust
        with:
          target: ${{ matrix.platform.target }}
          cache: false

      - name: Install packages (macOS)
        if: matrix.platform.os == 'macOS-latest'
        run: |
          brew install llvm

      - name: Install cross
        if: matrix.platform.os != 'macOS-latest'
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cross
          cache-key: ${{ matrix.platform.target }}
          git: https://github.com/cross-rs/cross

      - name: Build with cross for Linux
        if: matrix.platform.os != 'macOS-latest'
        run: |
          cross build --release --locked --target ${{ matrix.platform.target }} --package ${{ matrix.package }}

      - name: Build with cargo for MacOS
        if: matrix.platform.os == 'macOS-latest'
        run: |
          rustup target add ${{ matrix.platform.target }}
          cargo build --release --locked --target ${{ matrix.platform.target }} --package ${{ matrix.package }}

      - name: Strip binaries
        run: ./scripts/strip-binary.sh "${{ matrix.platform.target }}"

      - name: Set Artifact Name
        id: artifact-name
        shell: bash
        run: |
          echo "value=${{ matrix.package }}-${{ matrix.platform.os_name }}" >> $GITHUB_OUTPUT

      - name: Package as archive
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czvf ../../../${{ steps.artifact-name.outputs.value }}.tar.gz ${{ matrix.package }}
          cd -

      - name: Publish release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.value }}
          path: ${{ matrix.package }}-*
          if-no-files-found: error

  release:
    name: Create Release with Knope
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: List Artifacts
        run: ls -R artifacts

      - name: Run Knope Action
        uses: knope-dev/action@v2.1.0
        with:
          github-token: ${{ secrets.REPO_TOKEN }}

      - name: Knope Release
        run: knope release
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

  publish-crates:
    name: Publish on Crates.io
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@master
      - name: Publish Crate
        uses: FuelLabs/publish-crates@v1
        with:
          publish-delay: 60000
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
